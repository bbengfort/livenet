// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LiveNet service

type LiveNetClient interface {
	Post(ctx context.Context, opts ...grpc.CallOption) (LiveNet_PostClient, error)
}

type liveNetClient struct {
	cc *grpc.ClientConn
}

func NewLiveNetClient(cc *grpc.ClientConn) LiveNetClient {
	return &liveNetClient{cc}
}

func (c *liveNetClient) Post(ctx context.Context, opts ...grpc.CallOption) (LiveNet_PostClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LiveNet_serviceDesc.Streams[0], c.cc, "/pb.LiveNet/Post", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveNetPostClient{stream}
	return x, nil
}

type LiveNet_PostClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type liveNetPostClient struct {
	grpc.ClientStream
}

func (x *liveNetPostClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *liveNetPostClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LiveNet service

type LiveNetServer interface {
	Post(LiveNet_PostServer) error
}

func RegisterLiveNetServer(s *grpc.Server, srv LiveNetServer) {
	s.RegisterService(&_LiveNet_serviceDesc, srv)
}

func _LiveNet_Post_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LiveNetServer).Post(&liveNetPostServer{stream})
}

type LiveNet_PostServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type liveNetPostServer struct {
	grpc.ServerStream
}

func (x *liveNetPostServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *liveNetPostServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LiveNet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LiveNet",
	HandlerType: (*LiveNetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Post",
			Handler:       _LiveNet_Post_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0xcd,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x87, 0x0a, 0x19, 0x19, 0x73, 0xb1, 0xfb, 0x64, 0x96, 0xa5, 0xfa,
	0xa5, 0x96, 0x08, 0x69, 0x70, 0xb1, 0x04, 0xe4, 0x17, 0x97, 0x08, 0xf1, 0xe8, 0x15, 0x24, 0xe9,
	0xb9, 0xe6, 0x95, 0xa5, 0xe6, 0xe4, 0x17, 0xa4, 0x4a, 0xa1, 0xf0, 0x94, 0x18, 0x34, 0x18, 0x0d,
	0x18, 0x93, 0xd8, 0xc0, 0x7a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x0c, 0xa4, 0x52,
	0x5f, 0x00, 0x00, 0x00,
}
